import xml.etree.cElementTree as ET
from collections import defaultdict
import re
import pprint
import json
import codecs

osm_file='C:/Users/Praneetha/Documents/chennai_india.osm'
def get_element(osm_file):
    context=ET.iterparse(osm_file,events=('start','end'))
    _,root=next(context)
    for event,elem in context:
        if event=='end':
            yield elem
            root.clear()
street_types_re=re.compile(r'\b\S+\.?$',re.IGNORECASE)
street_types=defaultdict(set)
expected=["Street","Avenue","Drive","Court","Place","Road","Nagar","Salai","Lane"]
mapping = { "St": "Street",
            "St.": "Street",
            "Ave":"Avenue",
            "Ave.":"Avenue",
            "Rd":"Road",
            "Rd.":"Road",
            "Ln":"Lane",
            "Extn.":"Extension",
            "Extn":"Extension",
            "Col":"Colony"
            }

def audit_street_type(street_types,street_name):
    m=street_types_re.search(street_name)
    if m:
        street_type=m.group()
        if street_type not in expected:
            street_types[street_type].add(street_name)
            return street_types

def is_street_name(elem):
    return (elem.attrib['k']=="addr:street")
def audit():
    for elem in get_element(osm_file):
        if elem.tag=="way":
            for tag in elem.iter("tag"):
                if is_street_name(tag):
                    audit_street_type(street_types,tag.attrib['v'])
                    #pprint.pprint(dict(street_types))
                    return dict(street_types)
audit()
 
def update_name(name, mapping):

    m=street_types_re.search(name)
    if m:
        if m.group() in mapping.keys():
           name= re.sub(m.group(),mapping[m.group()],name)
    return name

def test():
    pprint.pprint(dict(street_types))
##    for st_types in dict(street_types):
##        
##       st_types = street_types[st_types]
##       pprint.pprint(st_types)

    for st_type,ways in street_types.iteritems():
        for name in ways:
            better_name = update_name(name, mapping)
            print better_name
test()
